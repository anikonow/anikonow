%% hydrone mission plan V1.1
%implemented  drawpolygon feature for mission planner w/ mesh grid
%
clc
clear

satim=imread("Hecken.JPG");

poscord1=[35304258, 80732018];
poscord2=[35303966, 80732337];

[xlocal, ylocal]= gps_to_feet(poscord1(1,1), poscord1(1,2),poscord2(1,1), poscord2(1,2));
% Mission params

% numDotsPerRow = (poscord1(1,1)-poscord2(1,1)) *.04;
% numDotsPerColumn = (poscord1(1,2)-poscord2(1,2)) *.03; 

rectWidth = size(satim,2);
rectHeight = size(satim,1);

% Create a grid of dots
[xGrid, yGrid] = meshgrid(linspace(0, rectWidth, xlocal), linspace(0, rectHeight, ylocal));

% Reshape the grid into column vectors
x = xGrid(:);
y = yGrid(:);

% Draw a polygon and get its vertices
figure;
plot(x, y, '.');
hold on
imshow(satim);
hold off
title('Draw a polygon for the region of interest');

roi = drawpolygon;
roiVertices = roi.Position;
roiVertices(size(roiVertices,1)+1,1)=roiVertices(1,1);
roiVertices(size(roiVertices,1),2)=roiVertices(1,2);

close

% Create a rectangle using polygon vertices
%Vertices = [5, 5; 15, 5; 15, 15; 5, 15; 5, 5]; %currently 10x10 box inside space
insideRectangle = inpolygon(x, y, roiVertices(:, 1), roiVertices(:, 2));

% Filter dots inside the rectangle
xInside = x(insideRectangle);
yInside = y(insideRectangle);
sortedDots = sortrows([xInside, yInside], [2, 1]);

%% Collision detection
hydroneR= 10;
jj=1;
ii=1;
for i=1:size(sortedDots, 1)
    coltest= sortedDots(i,:);
    coltestx= [coltest(:,1)+hydroneR,coltest(:,2)];
    coltesty= [coltest(:,1),coltest(:,2)+hydroneR];
    coltestxn= [coltest(:,1)-hydroneR,coltest(:,2)];
    coltestyn= [coltest(:,1),coltest(:,2)-hydroneR];

    if inpolygon(coltestx(:,1),coltestx(:,2),roiVertices(:, 1), roiVertices(:, 2)) == 1 && ...
            inpolygon(coltestxn(:,1),coltestxn(:,2),roiVertices(:, 1), roiVertices(:, 2)) == 1&& ...
            inpolygon(coltesty(:,1),coltesty(:,2),roiVertices(:, 1), roiVertices(:, 2)) == 1&& ...
            inpolygon(coltestyn(:,1),coltestyn(:,2),roiVertices(:, 1), roiVertices(:, 2)) == 1
        
        validmesh(jj,:)= sortedDots(i,:);
        jj=jj+1;
    else
        invalidmesh(ii,:)= sortedDots(i,:);
        ii=ii+1;
    end
%fprintf("loop compleded %f\n", i)
end

cs = uavCoverageSpace(Polygons={},UseLocalCoordinates=false,ReferenceLocation=mwLS);

figure;

imshow("Hecken.jpg")
hold on
plot(validmesh(:,1),validmesh(:,2),'.')
plot(invalidmesh(:,1),invalidmesh(:,2),'.')
plot(sortedDots(:, 1), sortedDots(:, 2), 'square');
plot(roiVertices(:, 1), roiVertices(:, 2), 'g', 'LineWidth', 2); % Show the drawpoly
%
set(gca, 'YDir', 'reverse');
xlabel('X-axis');
ylabel('Y-axis');
title('Waypoint Mission Planning');
hold off;





function [x_distance_feet, y_distance_feet] = gps_to_feet(lat1, lon1, lat2, lon2)

    x= lat1 - lat2;
    y= lon1 - lon2;

    x_distance_feet=abs(x)*.25;
    y_distance_feet=abs(y)*.25-.75;

end

